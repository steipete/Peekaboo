name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: macos-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.4.app/Contents/Developer
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -s $DEVELOPER_DIR
        xcodebuild -version
        swift --version
    
    - name: Build Swift CLI for tests
      run: |
        cd Apps/CLI
        swift build -c release
        # Copy the binary to the expected location
        cp .build/release/peekaboo ../../peekaboo
        cd ../..
        # Make it executable
        chmod +x peekaboo
        # Verify it exists
        ls -la peekaboo
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: Server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd Server
        npm ci
    
    - name: Build TypeScript
      run: |
        cd Server
        npm run build
    
    - name: Run linter
      run: |
        cd Server
        npm run lint --if-present
    
    - name: Run tests with coverage
      run: |
        cd Server
        npm run test:coverage
      env:
        CI: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./Server/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build-swift:
    runs-on: macos-latest
    timeout-minutes: 30
    
    env:
      DEVELOPER_DIR: /Applications/Xcode_16.4.app/Contents/Developer
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Xcode
      run: |
        sudo xcode-select -s $DEVELOPER_DIR
        xcodebuild -version
        swift --version
    
    - name: Build Swift CLI
      run: |
        cd Apps/CLI
        swift build -c release
    
    - name: Run Swift tests
      timeout-minutes: 15
      run: |
        cd Apps/CLI
        swift test --parallel --filter "ImageCommandTests|ImageAnalyzeIntegrationTests|ConfigCommandTests|ListCommandTests|VersionTests|ModelsTests|JSONOutputTests|ErrorHandlingTests|FileHandlingTests|ConfigurationTests"
      env:
        CI: true